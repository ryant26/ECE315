/*
 * error_wrapper.cpp
 *
 *  Created on: 16-Jan-2014
 *      Author: Nancy Minderman
 *      Description: This wrapper function will help display the errors returned from the
 *      				operating system calls
 *      Example for calls that return BYTE types : err = display_error("Location info:", OSSemPost(&sem));
 *		Example for calls that return void * types:
 *		 	msg = OSQPend( pQ, WAIT_FOREVER, err);
 *		 	display_error("Location info:", err);
 */

#include "predef.h"
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <basictypes.h>
#include <ucos.h>

#define OS_TIMEOUT_MESSAGE 				0
#define OS_MBOX_FULL_MESSAGE 			1
#define OS_Q_FULL_MESSAGE				2
#define OS_PRIO_EXIST_MESSAGE			3
#define OS_SEM_ERR_MESSAGE				4
#define OS_SEM_OVR_MESSAGE				5
#define OS_CRIT_ERROR_MESSAGE			6
#define OS_NO_MORE_TCP_MESSAGE 			7
#define OS_UNRECOGNIZED_ERROR_MESSAGE 	8


/* Name: display_error
 * Description: Displays any error conditions related to the operating system
 * 				calls. This is just a wrapper that will make displaying the
 * 				error message easier. Note that this function is not interrupt safe!
 * Inputs:	const char * info is a pointer to a string that will be displayed
 * 			along with the error message if it is not NULL.
 * 			BYTE error is the error generated by the operating system call
 * Outputs: BYTE error is the error generated by the operating system call.
 */
BYTE display_error(const char * info, BYTE error) {
	static const char * messages[] =
						{	"OS_TIMEOUT has occurred\n",
							"OS_MBOX_FULL has occurred\n",
							"OS_Q_FULL has occurred\n",
							"OS_PRIO_EXIST has occurred\n",
							"OS_SEM_ERR has occurred\n",
							"OS_SEM_OVF has occurred\n",
							"OS_CRIT_ERR has occurred\n",
							"OS_NO_MORE_TCB has occurred\n",
							"Unrecognized error\n"};
	switch (error) {
		case OS_NO_ERR:
			break; // do nothing here
		case OS_TIMEOUT:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_TIMEOUT_MESSAGE]);
			break;
		case OS_MBOX_FULL:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_MBOX_FULL_MESSAGE]);
			break;
		case OS_Q_FULL:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_Q_FULL_MESSAGE]);
			break;
		case OS_PRIO_EXIST:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_PRIO_EXIST_MESSAGE]);
			break;
		case OS_SEM_ERR:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_SEM_ERR_MESSAGE]);
			break;
		case OS_SEM_OVF:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_SEM_OVR_MESSAGE]);
			break;
		case OS_CRIT_ERR:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_CRIT_ERROR_MESSAGE]);
			break;
		case OS_NO_MORE_TCB:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_NO_MORE_TCP_MESSAGE]);
			break;
		default:
			if (info != NULL) iprintf(info);
			iprintf(messages[OS_UNRECOGNIZED_ERROR_MESSAGE]);
			iprintf("Error #: %i", error);
	}
	return error;
}
